/// Throws an error if the given value is not equal to the expected type.
/// @access public
/// @group common / validation
/// @param {*} $value - The value
/// @param {String} $expectedType - The expected type
/// @param {String} $errorMessage - The error message to display in case of error
/// @return {Null}
/// @example 
///   validate-type($value, 'string', '$value must be a %type%')
@function validate-type(
  $value,
  $expectedType,
  $errorMessage
  ) {
  // If `$expectedType` is not in the valid type list
  @if index($_valid-types, $expectedType) == null {
    // throws an error.
    @error 'argument `$expectedType` of `validate-type()` must be a string';
  }
  // If `$errorMessage` is not a string
  @if type-of($errorMessage) != 'string' {
    // throws an error.
    @error 'argument `$errorMessage` of `validate-type()` must be a string';
  }
  

  @if str-index($errorMessage, '%type%') {
    // Replaces any occurence of `%type%` in the error message with the expected type.
    $errorMessage: str-replace($errorMessage, '%type%', $expectedType);  
  }

  $expression: null;

  // If the type is a generic (ex: list<string>).
  @if str-index($expectedType, '<') != null and str-index($expectedType, '>') == str-length($expectedType) {
    // If $value is a list or a map.
    $values: $value;

    // Gets the generic type (type inside the carrets).
    $genericType: str-slice($expectedType, str-index($expectedType, '<') + 1, str-length($expectedType) - 1);

    // If $value is a list and the expected type is generic list
    @if type-of($value) == 'list' and str-index($expectedType, 'list') != null {
       
      // loops through the list
      @each $item in $values {
        // to validate type of each item.
        $call: validate(type-of($item) == $genericType, $errorMessage);
      }
    }

    // If $value is a map and the expected type is generic map
    @if type-of($value) == 'map' and str-index($expectedType, 'map') != null {
       
      $genericKeyType: str-slice($genericType, 1, str-index($genericType, ',') - 1);
      $genericValueType: str-slice($genericType, str-index($genericType, ',') + 2, str-length($genericType));

      // loops through the map
      @each $itemKey, $itemValue in $values {
        // to validate type of each item key and item value
        $call: validate(type-of($itemKey) == $genericKeyType, $errorMessage);
        // and to validate type of each item value.
        $call: validate(type-of($itemValue) == $genericValueType, $errorMessage);
      }
    }
  }
  @else {
    $call: validate(type-of($value) == $expectedType, $errorMessage);
  }

  @return null;

}