/// Adds a new color variant.
/// @access public
/// @group core
/// @param {String} $name - The color variant name
/// @param {Color} $code - The color code
@mixin color-variant(
  $name,
  $code
  ) {
  @if no-error(
    validate-type($name, 'string', argument-type-error('$name', 'color-variant()')),
    validate-type($code, 'color', argument-type-error('$code', 'color-variant()'))
    ) {


    // Gets the base color name from the scope.
    $baseColorName: base('name');
    // Gets the base color code.
    $baseColor: map-get($_colors, $baseColorName);

    // If the base color doesn't exists
    @if $baseColor == null {
      // throw an error.
      @error 'can\'t add variant `#{$name}` to an undefined color';
    }

    // If the color variant already exists
    @if get-color($baseColorName, $name) != null {
      // throw an error.
      @error 'variant `#{$name}` of color `#{baseColorName}` can\'t be declared twice';
    }

    // Creates the new color variant map.
    $newColorVariant: (
      $name: $code
    );

    // Adds the new color variant to the base color.
    $mergedColorMap: map-merge($baseColor, $newColorVariant);

    // Adds the edited color to the color list.
    $_colors: map-merge($_colors, ($baseColorName: $mergedColorMap)) !global;

  }
}